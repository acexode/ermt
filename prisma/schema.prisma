generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  password     String
  role         UserRole    @default(USER)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  providerId   String?
  departmentId String?
  sectionId    String?
  disciplineId String?
  requests     Request[]
  department   Department? @relation(fields: [departmentId], references: [id])
  discipline   Discipline? @relation(fields: [disciplineId], references: [id])
  provider     Provider?   @relation(fields: [providerId], references: [id])
  section      Section?    @relation(fields: [sectionId], references: [id])
}

model Provider {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  Request     Request[]
  users       User[]
}

model Department {
  id         String    @id @default(cuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  providerId String
  provider   Provider  @relation(fields: [providerId], references: [id])
  Request    Request[]
  sections   Section[]
  users      User[]
}

model Section {
  id           String       @id @default(cuid())
  name         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  departmentId String
  disciplines  Discipline[]
  department   Department   @relation(fields: [departmentId], references: [id])
  users        User[]
}

model Discipline {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id])
  users     User[]
}

model Request {
  id                     String         @id @default(cuid())
  title                  String
  requestedService       String
  serviceDescription     String
  businessJustification  String
  requiredStartDate      DateTime
  requiredCompletionDate DateTime
  fileUrl                String?
  priority               Priority
  requestGroup           String
  impactCategory         ImpactCategory
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  userId                 String
  providerId             String
  departmentId           String
  approvalTrail          Json[]         @default([])
  status                 RequestStatus  @default(PENDING_SUPERADMIN_REVIEW)
  department             Department     @relation(fields: [departmentId], references: [id])
  provider               Provider       @relation(fields: [providerId], references: [id])
  user                   User           @relation(fields: [userId], references: [id])
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ImpactCategory {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RequestStatus {
  PENDING_SUPERADMIN_REVIEW
  PENDING_ADMIN_REVIEW
  ASSIGNED_TO_ENGINEER
  IN_PROGRESS
  COMPLETED_BY_ENGINEER
  PENDING_MATRIX_APPROVAL
  APPROVED
  REJECTED
}
