// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ImpactCategory {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RequestStatus {
  PENDING_SUPERADMIN_REVIEW
  PENDING_ADMIN_REVIEW
  ASSIGNED_TO_ENGINEER
  IN_PROGRESS
  COMPLETED_BY_ENGINEER
  PENDING_MATRIX_APPROVAL
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Optional relationships
  provider      Provider? @relation(fields: [providerId], references: [id])
  providerId    String?
  department    Department? @relation(fields: [departmentId], references: [id])
  departmentId  String?
  section       Section? @relation(fields: [sectionId], references: [id])
  sectionId     String?
  discipline    Discipline? @relation(fields: [disciplineId], references: [id])
  disciplineId  String?

  // Requests
  requests      Request[]
}

model Provider {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  users       User[]
  departments Department[]
}

model Department {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  provider    Provider  @relation(fields: [providerId], references: [id])
  providerId  String
  users       User[]
  sections    Section[]
}

model Section {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String
  users       User[]
  disciplines Discipline[]
}

model Discipline {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  section     Section   @relation(fields: [sectionId], references: [id])
  sectionId   String
  users       User[]
}

model Request {
  id                      String    @id @default(cuid())
  title                   String
  requestedService        String
  serviceDescription      String
  businessJustification   String
  requiredStartDate       DateTime
  requiredCompletionDate  DateTime
  fileUrl                 String?
  priority                Priority
  requestGroup            String
  impactCategory          ImpactCategory
  status                  RequestStatus @default(PENDING_SUPERADMIN_REVIEW)
  approvalTrail           Json[]        @default([])
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relationships
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  provider                Provider  @relation(fields: [providerId], references: [id])
  providerId              String
  department              Department @relation(fields: [departmentId], references: [id])
  departmentId            String
} 
